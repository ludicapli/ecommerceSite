{"version":3,"file":"index-d8cac52c.js","sources":["../../src/desk/panes/documentList/constants.ts","../../src/desk/panes/documentList/helpers.ts","../../src/desk/panes/documentList/DocumentListPaneContent.tsx","../../src/desk/panes/documentList/DocumentListPaneHeader.tsx","../../src/desk/panes/documentList/getQueryResults.ts","../../src/desk/panes/documentList/useDocumentList.ts","../../src/desk/panes/documentList/DocumentListPane.tsx"],"sourcesContent":["import {SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n","import * as PathUtils from '@sanity/util/paths'\nimport {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  ObjectField,\n  ObjectFieldType,\n  ObjectSchemaType,\n  SanityDocument,\n  SchemaType,\n} from '@sanity/types'\nimport {DocumentListPaneItem, SortOrder, SortOrderBy} from './types'\nimport {getPublishedId, collate} from 'sanity'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocument[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft: !!entry.draft,\n    }\n  }) as any\n}\n\nconst RE_TYPE_NAME_IN_FILTER =\n  /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type\\b/\nexport function getTypeNameFromSingleTypeFilter(\n  filter: string,\n  params: Record<string, unknown> = {}\n): string | null {\n  const matches = filter.match(RE_TYPE_NAME_IN_FILTER)\n\n  if (!matches) {\n    return null\n  }\n\n  const match = (matches[1] || matches[2]).trim().replace(/^[\"']|[\"']$/g, '')\n\n  if (match[0] === '$') {\n    const k = match.slice(1)\n    const v = params[k]\n\n    return typeof v === 'string' ? v : null\n  }\n\n  return match\n}\n\nexport function isSimpleTypeFilter(filter: string): boolean {\n  return /^_type\\s*==\\s*['\"$]\\w+['\"]?\\s*$/.test(filter.trim())\n}\n\nexport function toOrderClause(orderBy: SortOrderBy[]): string {\n  return orderBy\n    .map((ordering) =>\n      [wrapFieldWithFn(ordering), (ordering.direction || '').toLowerCase()]\n        .map((str) => str.trim())\n        .filter(Boolean)\n        .join(' ')\n    )\n    .join(',')\n}\n\nfunction wrapFieldWithFn(ordering: SortOrderBy): string {\n  return ordering.mapWith ? `${ordering.mapWith}(${ordering.field})` : ordering.field\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n","import {SyncIcon} from '@sanity/icons'\nimport {\n  Box,\n  Button,\n  Card,\n  Container,\n  Flex,\n  Heading,\n  Spinner,\n  Stack,\n  Text,\n  VirtualList,\n  VirtualListChangeOpts,\n} from '@sanity/ui'\nimport React, {useCallback, useEffect, useMemo, useState} from 'react'\nimport {SanityDocument} from '@sanity/types'\nimport {Delay, PaneContent, usePane, usePaneLayout, PaneItem} from '../../components'\nimport {DocumentListPaneItem} from './types'\nimport {getDocumentKey} from './helpers'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {GeneralPreviewLayoutKey, getPublishedId, useSchema} from 'sanity'\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeContraint: boolean\n  fullList: boolean\n  isActive?: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[] | null\n  layout?: GeneralPreviewLayoutKey\n  onListChange: (opts: VirtualListChangeOpts) => void\n  onRetry?: (event: unknown) => void\n  showIcons: boolean\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeContraint,\n    fullList,\n    isActive,\n    isLoading,\n    items,\n    layout,\n    onListChange,\n    onRetry,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed])\n\n  const renderItem = useCallback(\n    (item: SanityDocument) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n\n      return (\n        <PaneItem\n          icon={showIcons === false ? false : undefined}\n          id={publishedId}\n          pressed={pressed}\n          selected={selected}\n          layout={layout}\n          schemaType={schema.get(item._type)}\n          value={item}\n        />\n      )\n    },\n    [childItemId, isActive, layout, schema, showIcons]\n  )\n\n  const content = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">Could not fetch list items</Heading>\n              <Text as=\"p\">\n                Error: <code>{error.message}</code>\n              </Text>\n              {onRetry && (\n                <Box>\n                  {/* eslint-disable-next-line react/jsx-handler-names */}\n                  <Button icon={SyncIcon} onClick={onRetry} text=\"Retry\" tone=\"primary\" />\n                </Box>\n              )}\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (items === null) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Delay ms={300}>\n            <>\n              <Spinner muted />\n              <Box marginTop={3}>\n                <Text align=\"center\" muted size={1}>\n                  Loading documentsâ€¦\n                </Text>\n              </Box>\n            </>\n          </Delay>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted size={2}>\n                {filterIsSimpleTypeContraint\n                  ? 'No documents of this type'\n                  : 'No matching documents'}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    const hasMoreItems = fullList && items.length === FULL_LIST_LIMIT\n\n    return (\n      <Box padding={2}>\n        {items.length > 0 && (\n          <VirtualList\n            gap={1}\n            getItemKey={getDocumentKey}\n            items={items}\n            renderItem={renderItem}\n            onChange={onListChange}\n            // prevents bug when panes won't render if first rendered while collapsed\n            key={`${index}-${collapsed}`}\n          />\n        )}\n\n        {isLoading && (\n          <Card borderTop marginTop={1} paddingX={3} paddingY={4}>\n            <Text align=\"center\" muted size={1}>\n              Loadingâ€¦\n            </Text>\n          </Card>\n        )}\n\n        {hasMoreItems && (\n          <Card marginTop={1} paddingX={3} paddingY={4} radius={2} tone=\"transparent\">\n            <Text align=\"center\" muted size={1}>\n              Displaying a maximum of {FULL_LIST_LIMIT} documents\n            </Text>\n          </Card>\n        )}\n      </Box>\n    )\n  }, [\n    error,\n    filterIsSimpleTypeContraint,\n    fullList,\n    onListChange,\n    isLoading,\n    items,\n    onRetry,\n    renderItem,\n    shouldRender,\n    collapsed,\n    index,\n  ])\n\n  return <PaneContent overflow={layoutCollapsed ? undefined : 'auto'}>{content}</PaneContent>\n}\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {Button} from '@sanity/ui'\nimport React, {memo, useMemo} from 'react'\nimport {PaneMenuItem, PaneMenuItemGroup, DeskToolPaneActionHandler} from '../../types'\nimport {BackLink, PaneHeader, PaneHeaderActions} from '../../components'\nimport {useDeskTool} from '../../useDeskTool'\nimport {SortOrder} from './types'\nimport {GeneralPreviewLayoutKey, InitialValueTemplateItem} from 'sanity'\n\ninterface DocumentListPaneHeaderProps {\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const DocumentListPaneHeader = memo(\n  ({\n    index,\n    initialValueTemplates = [],\n    menuItems = [],\n    menuItemGroups = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: DocumentListPaneHeaderProps) => {\n    const {features} = useDeskTool()\n\n    const actionHandlers = useMemo((): Record<string, DeskToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <PaneHeader\n        backButton={\n          features.backButton &&\n          index > 0 && <Button as={BackLink} data-as=\"a\" icon={ArrowLeftIcon} mode=\"bleed\" />\n        }\n        title={title}\n        actions={\n          <PaneHeaderActions\n            initialValueTemplateItems={initialValueTemplates}\n            actionHandlers={actionHandlers}\n            menuItemGroups={menuItemGroups}\n            menuItems={menuItems}\n          />\n        }\n      />\n    )\n  }\n)\n\nDocumentListPaneHeader.displayName = 'DocumentListPaneHeader'\n","import {SanityClient} from '@sanity/client'\nimport deepEquals from 'react-fast-compare'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  mergeMapTo,\n  startWith,\n  switchMap,\n  take,\n  scan,\n  delay,\n  takeUntil,\n  share,\n  publishReplay,\n  refCount,\n} from 'rxjs/operators'\nimport {concat, merge, of, fromEvent, Observable, Subject} from 'rxjs'\nimport {SanityDocument} from '@sanity/types'\nimport {listenQuery} from 'sanity'\n\nconst INITIAL_CHILD_PROPS = {\n  result: null,\n  error: false,\n}\n\nconst createResultChildProps = (documents: SanityDocument[]) => ({\n  result: {documents},\n  loading: false,\n  error: false,\n})\n\nconst createErrorChildProps = (error: Error) => ({\n  result: null,\n  loading: false,\n  error,\n})\n\nexport const getQueryResults = (\n  receivedProps$: Observable<{client: SanityClient; query: string; params: Record<string, any>}>,\n  options = {}\n) => {\n  const onRetry$ = new Subject()\n  const onRetry = onRetry$.next.bind(onRetry$)\n\n  const queryProps$ = receivedProps$.pipe(\n    map((props) => ({client: props.client, query: props.query, params: props.params})),\n    distinctUntilChanged(deepEquals),\n    publishReplay(1),\n    refCount()\n  )\n\n  const queryResults$ = queryProps$.pipe(\n    switchMap((queryProps) => {\n      const query$ = listenQuery(\n        queryProps.client,\n        queryProps.query,\n        queryProps.params,\n        options\n      ).pipe(map(createResultChildProps), share())\n      return merge(of({loading: true}).pipe(delay(400), takeUntil(query$)), query$)\n    })\n  )\n\n  return queryResults$.pipe(\n    startWith(INITIAL_CHILD_PROPS),\n    catchError((err, caught$) =>\n      concat(\n        of(createErrorChildProps(err)),\n        merge(fromEvent(window, 'online'), onRetry$).pipe(take(1), mergeMapTo(caught$))\n      )\n    ),\n    scan((prev, next) => ({...prev, ...next, onRetry}))\n  )\n}\n","import {VirtualListChangeOpts} from '@sanity/ui'\nimport {useEffect, useState, useCallback, useMemo, useRef} from 'react'\nimport {of} from 'rxjs'\nimport {filter as filterEvents} from 'rxjs/operators'\nimport {DocumentListPaneItem, QueryResult, SortOrder} from './types'\nimport {removePublishedWithDrafts, toOrderClause} from './helpers'\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {getQueryResults} from './getQueryResults'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, useClient} from 'sanity'\n\ninterface UseDocumentListOpts {\n  filter: string\n  params: Record<string, unknown>\n  sortOrder?: SortOrder\n  apiVersion?: string\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  fullList: boolean\n  handleListChange: ({toIndex}: VirtualListChangeOpts) => void\n  isLoading: boolean\n  items: DocumentListPaneItem[] | null\n  onRetry?: (event: unknown) => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): DocumentListState {\n  const {apiVersion, filter, params, sortOrder} = opts\n  const client = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n  const [fullList, setFullList] = useState(false)\n  const fullListRef = useRef(fullList)\n  const [result, setResult] = useState<QueryResult | null>(null)\n  const error = result?.error || null\n  const isLoading = result?.loading || result === null\n  const onRetry = result?.onRetry\n  const documents = result?.result?.documents\n  const items = useMemo(\n    () => (documents ? removePublishedWithDrafts(documents) : null),\n    [documents]\n  )\n\n  const query = useMemo(() => {\n    const extendedProjection = sortOrder?.extendedProjection\n    const projectionFields = ['_id', '_type']\n    const finalProjection = projectionFields.join(',')\n    const sortBy = sortOrder?.by || []\n    const limit = fullList ? FULL_LIST_LIMIT : PARTIAL_PAGE_LIMIT\n    const sort = sortBy.length > 0 ? sortBy : DEFAULT_ORDERING.by\n    const order = toOrderClause(sort)\n\n    if (extendedProjection) {\n      const firstProjection = projectionFields.concat(extendedProjection).join(',')\n      return [\n        `*[${filter}] {${firstProjection}}`,\n        `order(${order}) [0...${limit}]`,\n        `{${finalProjection}}`,\n      ].join('|')\n    }\n\n    return `*[${filter}]|order(${order})[0...${limit}]{${finalProjection}}`\n  }, [filter, fullList, sortOrder])\n\n  const handleListChange = useCallback(\n    ({toIndex}: VirtualListChangeOpts) => {\n      if (isLoading || fullListRef.current) {\n        return\n      }\n\n      if (toIndex >= PARTIAL_PAGE_LIMIT / 2) {\n        setFullList(true)\n\n        // Prevent change handler from firing again before setState kicks in\n        fullListRef.current = true\n      }\n    },\n    [isLoading]\n  )\n\n  // Set up the document list listener\n  useEffect(() => {\n    // @todo: explain what this does\n    const filterFn = fullList\n      ? (queryResult: {result: QueryResult | null}) => Boolean(queryResult.result)\n      : () => true\n\n    // Set loading state\n    setResult((r) => (r ? {...r, loading: true} : null))\n\n    const queryResults$ = getQueryResults(of({client, query, params}), {\n      apiVersion,\n      tag: 'desk.document-list',\n    }).pipe(filterEvents(filterFn) as any)\n\n    const sub = queryResults$.subscribe(setResult as any)\n\n    return () => sub.unsubscribe()\n  }, [apiVersion, client, fullList, query, params])\n\n  // If `filter` or `params` changed, set up a new query from scratch.\n  // If `sortOrder` changed, set up a new query from scratch as well.\n  useEffect(() => {\n    setResult(null)\n    setFullList(false)\n    fullListRef.current = false\n  }, [filter, params, sortOrder, apiVersion])\n\n  return {error, fullList, handleListChange, isLoading, items, onRetry}\n}\n","import React, {memo, useMemo, useRef} from 'react'\nimport {Card, Code} from '@sanity/ui'\nimport shallowEquals from 'shallow-equals'\nimport {isEqual} from 'lodash'\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {useDeskToolSetting} from '../../useDeskToolSetting'\nimport {BaseDeskToolPaneProps} from '../types'\nimport {PaneMenuItem} from '../../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {\n  applyOrderingFunctions,\n  getTypeNameFromSingleTypeFilter,\n  isSimpleTypeFilter,\n} from './helpers'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {DocumentListPaneHeader} from './DocumentListPaneHeader'\nimport {SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\nimport {GeneralPreviewLayoutKey, SourceProvider, useSchema, useSource, useUnique} from 'sanity'\n\ntype DocumentListPaneProps = BaseDeskToolPaneProps<'documentList'>\n\nconst EMPTY_ARRAY: never[] = []\n\nfunction useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const valueRef = useRef<ValueType>(value)\n  if (!shallowEquals(valueRef.current, value)) {\n    valueRef.current = value\n  }\n  return valueRef.current\n}\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralPreviewLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\n/**\n * @internal\n */\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, index, isActive, isSelected, pane, paneKey} = props\n  const schema = useSchema()\n  const {name: parentSourceName} = useSource()\n  const {\n    defaultLayout = 'default',\n    displayOptions,\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItems,\n    menuItemGroups,\n    options,\n    title,\n  } = pane\n  const {apiVersion, defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => getTypeNameFromSingleTypeFilter(filter, params), [filter, params])\n  const showIcons = displayOptions?.showIcons !== false\n  const [layout, setLayout] = useDeskToolSetting<GeneralPreviewLayoutKey>(\n    typeName,\n    'layout',\n    defaultLayout\n  )\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useDeskToolSetting<SortOrder>(\n    typeName,\n    'sortOrder',\n    defaultSortOrder\n  )\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n  const filterIsSimpleTypeContraint = isSimpleTypeFilter(filter)\n\n  const {error, fullList, handleListChange, isLoading, items, onRetry} = useDocumentList({\n    filter,\n    params,\n    sortOrder,\n    apiVersion,\n  })\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw]\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane currentMaxWidth={350} id={paneKey} maxWidth={640} minWidth={320} selected={isSelected}>\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <DocumentListPaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItems={menuItemsWithSelectedState}\n          menuItemGroups={menuItemGroups}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n\n        <DocumentListPaneContent\n          childItemId={childItemId}\n          error={error}\n          filterIsSimpleTypeContraint={filterIsSimpleTypeContraint}\n          fullList={fullList}\n          isActive={isActive}\n          isLoading={isLoading}\n          items={items}\n          layout={layout}\n          onListChange={handleListChange}\n          onRetry={onRetry}\n          showIcons={showIcons}\n        />\n      </Pane>\n    </SourceProvider>\n  )\n})\n"],"names":["PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","direction","EMPTY_RECORD","getDocumentKey","value","index","_id","getPublishedId","removePublishedWithDrafts","documents","collate","map","entry","doc","draft","published","hasPublished","hasDraft","RE_TYPE_NAME_IN_FILTER","getTypeNameFromSingleTypeFilter","filter","params","arguments","length","undefined","matches","match","trim","replace","k","slice","v","isSimpleTypeFilter","test","toOrderClause","orderBy","ordering","wrapFieldWithFn","toLowerCase","str","Boolean","join","mapWith","concat","applyOrderingFunctions","order","schemaType","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","every","item","baseType","path","pathSegments","PathUtils","fromString","current","segment","getFieldTypeByName","isArrayAccessor","isKeySegment","isIndexSegment","memberType","otherType","of","isReferenceSchemaType","refType","otherRefType","to","type","fieldName","fields","find","name","ofType","DocumentListPaneContent","props","childItemId","error","filterIsSimpleTypeContraint","fullList","isActive","isLoading","items","layout","onListChange","onRetry","showIcons","schema","useSchema","collapsed","layoutCollapsed","usePaneLayout","usePane","shouldRender","setShouldRender","useState","useEffect","timer","setTimeout","clearTimeout","renderItem","useCallback","publishedId","isSelected","pressed","selected","jsx","PaneItem","icon","id","get","_type","content","useMemo","Flex","align","height","justify","children","Container","width","jsxs","Stack","paddingX","paddingY","space","Heading","as","Text","message","Box","Button","SyncIcon","onClick","text","tone","Delay","ms","Fragment","Spinner","muted","marginTop","size","hasMoreItems","padding","VirtualList","gap","getItemKey","onChange","Card","borderTop","radius","PaneContent","overflow","DocumentListPaneHeader","memo","_ref","initialValueTemplates","menuItems","menuItemGroups","setLayout","setSortOrder","title","features","useDeskTool","actionHandlers","_ref2","sort","PaneHeader","backButton","BackLink","ArrowLeftIcon","mode","actions","PaneHeaderActions","initialValueTemplateItems","displayName","INITIAL_CHILD_PROPS","result","createResultChildProps","loading","createErrorChildProps","getQueryResults","receivedProps$","options","onRetry$","Subject","next","bind","queryProps$","pipe","client","query","distinctUntilChanged","deepEquals","publishReplay","refCount","queryResults$","switchMap","queryProps","query$","listenQuery","share","merge","delay","takeUntil","startWith","catchError","err","caught$","fromEvent","window","take","mergeMapTo","scan","prev","useDocumentList","opts","_a","apiVersion","sortOrder","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","setFullList","fullListRef","useRef","setResult","extendedProjection","projectionFields","finalProjection","sortBy","limit","firstProjection","handleListChange","_ref3","toIndex","filterFn","queryResult","r","tag","filterEvents","sub","subscribe","unsubscribe","EMPTY_ARRAY","useShallowUnique","valueRef","shallowEquals","addSelectedStateToMenuItems","sortOrderRaw","_b","_c","_d","isEqual","DocumentListPane","pane","paneKey","parentSourceName","useSource","defaultLayout","displayOptions","defaultOrdering","sourceName","source","typeName","useDeskToolSetting","defaultSortOrder","sortWithOrderingFn","useUnique","menuItemsWithSelectedState","SourceProvider","Pane","currentMaxWidth","maxWidth","minWidth","_DEBUG"],"mappings":"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"}